name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # The 'build' job compiles the application for different operating systems and architectures.
  build:
    # Use a matrix strategy to define the build targets.
    strategy:
      matrix:
        # Define the Go-specific OS and architecture pairs.
        go-os: [linux, darwin]
        go-arch: [amd64, arm64]
        # Use 'include' to map the Go OS to the correct GitHub Actions runner.
        include:
          - go-os: linux
            os: ubuntu-latest
          - go-os: darwin
            os: macos-latest
    
    # Run each build job on the corresponding runner defined in the matrix.
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Build the binary
      # Pass the correct GOOS and GOARCH from the matrix to the build command.
      run: make build
      env:
        GOOS: ${{ matrix.go-os }}
        GOARCH: ${{ matrix.go-arch }}

    - name: Rename binary for release
      # Create a unique name for each binary based on its OS and architecture.
      run: |
        BINARY_NAME="cl-${{ matrix.go-os }}-${{ matrix.go-arch }}"
        mv ./bin/cl ./bin/${BINARY_NAME}
      shell: bash

    - name: Upload artifact
      # Upload the compiled binary so it can be used in the 'release' job.
      uses: actions/upload-artifact@v4
      with:
        name: cl-binaries
        path: ./bin/cl-*

  # The 'release' job creates a new GitHub Release and uploads the binaries.
  # It only runs when code is pushed to the 'master' branch.
  release:
    runs-on: ubuntu-latest
    # This job depends on the 'build' job completing successfully.
    needs: build
    # This condition ensures the release only happens on a push to the master branch.
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write # This permission is required to create a release.
    steps:
    - name: Download all build artifacts
      # Download the binaries that were uploaded by the 'build' job.
      uses: actions/download-artifact@v4
      with:
        name: cl-binaries
        path: ./release-assets

    - name: Generate release tag
      # Create a unique tag name based on the current date and time.
      id: tag
      run: echo "tag_name=v$(date +'%Y.%m.%d.%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      # Use the standard action for creating releases.
      uses: softprops/action-gh-release@v2
      with:
        # Use the tag generated in the previous step.
        tag_name: ${{ steps.tag.outputs.tag_name }}
        # The title of the release will be the same as the tag.
        name: ${{ steps.tag.outputs.tag_name }}
        # Attach all the downloaded binaries to the release.
        files: ./release-assets/*
