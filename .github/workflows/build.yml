name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # The 'build' job remains exactly the same. It compiles the binaries.
  build:
    strategy:
      matrix:
        go-os: [linux, darwin]
        go-arch: [amd64, arm64]
        include:
          - go-os: linux
            os: ubuntu-latest
          - go-os: darwin
            os: macos-latest
    
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4' # Use your Go version

    - name: Build the binary
      # Use the correct binary name 'ch'
      run: |
        BINARY_NAME="ch-${{ matrix.go-os }}-${{ matrix.go-arch }}"
        make build
        mv ./bin/ch ./bin/${BINARY_NAME}
      env:
        GOOS: ${{ matrix.go-os }}
        GOARCH: ${{ matrix.go-arch }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        # Create a unique name for the artifact to avoid collisions
        name: ch-binary-${{ matrix.go-os }}-${{ matrix.go-arch }}
        path: ./bin/ch-*

  # This job uses release-please to automate versioning and changelogs.
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    # These permissions are required for release-please to create releases and PRs.
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-assets

      - name: Run Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          # This tells the action how to create the release.
          release-type: go
          # The token is required to create releases on your behalf.
          token: ${{ secrets.GITHUB_TOKEN }}
          # This allows you to include your compiled binaries in the release.
          # It finds all the downloaded artifacts and prepares them for upload.
          extra-files: |
            ./release-assets/**/*
